import logging
import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")

# –¢–∞–π–º—Ñ—Ä–µ–π–º—ã
TIMEFRAMES = ["5s", "15s", "1m", "3m", "5m"]

# –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
CURRENCY_PAIRS = [
    "EURUSD", "GBPUSD", "USDJPY", "AUDUSD", "USDCAD",
    "NZDUSD", "USDCHF", "EURJPY", "GBPJPY", "EURGBP"
]

# –§–µ–π–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (30 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ + –ò–ò –ª–æ–≥–∏–∫–∞)
def analyze_with_ai(symbol: str, timeframe: str) -> str:
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å TA-Lib, pandas-ta, TensorFlow –∏ —Ç.–¥.
    reasons = [
        "SMA: –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª",
        "RSI: –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å",
        "MACD: –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö",
        "–°—Ç–æ—Ö–∞—Å—Ç–∏–∫: —Ä–æ—Å—Ç",
        "–ê–ª–∏–≥–∞—Ç–æ—Ä: —Ç—Ä–µ–Ω–¥ –≤–≤–µ—Ä—Ö",
        "–§—Ä–∞–∫—Ç–∞–ª—ã: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
        "Parabolic SAR: –ø–æ–∫—É–ø–∫–∞",
    ]
    # + –µ—â—ë 23 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
    decision = "BUY ‚úÖ" if "–ø–æ–∫—É–ø–∫–∞" in reasons[-1] else "SELL üîª"
    return f"üìä {symbol} | {timeframe}\n" + "\n".join(reasons) + f"\nüìå –ò—Ç–æ–≥: {decision}"

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(pair, callback_data=f"pair:{pair}")]
        for pair in CURRENCY_PAIRS
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("pair:"):
        pair = data.split(":")[1]
        keyboard = [
            [InlineKeyboardButton(tf, callback_data=f"analyze:{pair}:{tf}")]
            for tf in TIMEFRAMES
        ]
        await query.edit_message_text(
            text=f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞ {pair}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º:",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )

    elif data.startswith("analyze:"):
        _, pair, tf = data.split(":")
        result = analyze_with_ai(pair, tf)
        await query.edit_message_text(text=result)

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    app.run_polling()

if __name__ == "__main__":
    main()
